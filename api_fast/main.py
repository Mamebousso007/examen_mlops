"""
API FastAPI pour la pr√©diction des prix immobiliers
"""
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import time
import logging
from contextlib import asynccontextmanager
from api_fast.router import router

from api_fast.model import HousePriceModel
from config import settings
from logger.logging_config import setup_logging

# Configuration du logging
setup_logging()
logger = logging.getLogger(__name__)

# Instance globale du mod√®le
model_instance = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application"""
    global model_instance
    
    # Startup
    logger.info("üöÄ D√©marrage de l'API House Price Prediction")
    try:
        model_instance = HousePriceModel()
        model_instance.load_model()
        logger.info("‚úÖ Mod√®le charg√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Arr√™t de l'API")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="House Price Prediction API",
    description="API de pr√©diction des prix immobiliers utilisant le machine learning",
    version="1.0.0",
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# Middleware pour le logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware pour logger toutes les requ√™tes"""
    start_time = time.time()
    
    # Log de la requ√™te entrante
    logger.info(
        "Requ√™te re√ßue",
        extra={
            "method": request.method,
            "url": str(request.url),
            "client_ip": request.client.host,
            "user_agent": request.headers.get("user-agent", "")
        }
    )
    
    # Traitement de la requ√™te
    try:
        response = await call_next(request)
        duration = time.time() - start_time
        
        # Log de la r√©ponse
        logger.info(
            "Requ√™te trait√©e",
            extra={
                "method": request.method,
                "url": str(request.url),
                "status_code": response.status_code,
                "duration": f"{duration:.3f}s"
            }
        )
        
        return response
        
    except Exception as e:
        duration = time.time() - start_time
        logger.error(
            "Erreur lors du traitement de la requ√™te",
            extra={
                "method": request.method,
                "url": str(request.url),
                "error": str(e),
                "duration": f"{duration:.3f}s"
            }
        )
        raise

# Gestionnaire d'erreurs global
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreurs global"""
    logger.error(
        "Erreur non g√©r√©e",
        extra={
            "method": request.method,
            "url": str(request.url),
            "error": str(exc)
        },
        exc_info=True
    )
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "message": "Une erreur inattendue s'est produite"
        }
    )

# Route de sant√©
@app.get("/health")
async def health_check():
    """Endpoint de v√©rification de sant√©"""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "model_loaded": model_instance is not None
    }

# Inclusion des routes
app.include_router(router, prefix="/api/v1")

# Point d'entr√©e pour le d√©veloppement
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level="info"
    )